{
    "contents" : "#this is a function for synthesizing the states of population in a matrix with 0s and 1s \n#when an input of vector (each value representing the number of individuals in that state) is given\n\n#length of the input vector gives out the number of states (which is also total columns)\n#sum of the vector gives the total population size (which is also total rows)\n#proportions of each state is calculated by dividing the vector with total population size\n\nsyn_pop <- function(states, shuffle=FALSE){ #states is the vector variable, each element represent the number of individuals belonging to that state (indexed)\n  #this is assuming that an individual can have only one state at a single timestep\n  \n  total.pop <- sum(states) #total population size\n  \n  result <- c(rep(1,states[1]), rep(0,total.pop - states[1])) #to store the resulting matrix, columns will be binded here in the following for loop\n  \n  \n  for(i in 2:length(states)){\n    tmp <- c(rep(0,sum(states[1:(i-1)])), rep(1, states[i]) , rep(0,total.pop - sum(states[1:i]) )) #tmp to store the result before cbinding\n    \n    result <- cbind(result, tmp, deparse.level = 0)\n  }\n  \n  if(shuffle==T){ result[sample(nrow(result)),]}\n  else result\n}",
    "created" : 1470812484007.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "432939554",
    "id" : "32023443",
    "lastKnownWriteTime" : 1470291815,
    "path" : "D:/Dropbox/IBM project_Sai/r package/ibmcraftr/R/syn_pop.R",
    "project_path" : "R/syn_pop.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}