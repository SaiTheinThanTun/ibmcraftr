{
    "contents" : "#' Create a synthetic population having several states.\n#'\n#' Populate a matrix in which columns represent the states of the individuals and rows represent the individuals.\n#'\n#' @param states A numeric vector with each element representing the number of individuals in a particular state\n#'     its index corresponds to.\n#' @param shuffle A logical value to enable shuffling of the individuals (rows) in the resulting matrix.\n#' @return A matrix of 0s, and 1s. The rows representing the individuals and the columns representing the states\n#'     the individuals are in\n#' @examples\n#' syn_pop(c(3,2,1))\n#' syn_pop(c(0,0,1,5), shuffle=TRUE)\n#'\n#' @export\n\nsyn_pop <- function(states, shuffle=FALSE){ #states is the vector variable, each element represent the number of individuals belonging to that state (indexed)\n  #this is assuming that an individual can have only one state at a single timestep\n\n  total.pop <- sum(states) #total population size\n\n  result <- c(rep(1,states[1]), rep(0,total.pop - states[1])) #to store the resulting matrix, columns will be binded here in the following for loop\n\n\n  for(i in 2:length(states)){\n    tmp <- c(rep(0,sum(states[1:(i-1)])), rep(1, states[i]) , rep(0,total.pop - sum(states[1:i]) )) #tmp to store the result before cbinding\n\n    result <- cbind(result, tmp, deparse.level = 0)\n  }\n\n  if(shuffle==T){ result[sample(nrow(result)),]}\n  else result\n}\n",
    "created" : 1470812484007.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3839016174",
    "id" : "32023443",
    "lastKnownWriteTime" : 1470851785,
    "path" : "D:/Dropbox/IBM project_Sai/r package/ibmcraftr/R/syn_pop.R",
    "project_path" : "R/syn_pop.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}